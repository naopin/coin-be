package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"

	"github.com/naopin/coin-be/graph/model"
	"github.com/naopin/coin-be/loader"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	//ランダムな数字の生成
	rand, _ := rand.Int(rand.Reader, big.NewInt(100))
	todo := model.Todo{
		Text:   input.Text,
		ID:     fmt.Sprintf("T%d", rand),
		UserId: input.UserID,
	}
	r.DB.Debug().Create(&todo)
	return &todo, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	//ランダムな値の生成
	rand, _ := rand.Int(rand.Reader, big.NewInt(100))
	user := model.User{
		ID:       fmt.Sprintf("U%d", rand),
		Name:     input.Name,
		Email:    input.Email,
		Password: input.Password,
	}
	r.DB.Debug().Create(&user)
	return &user, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	todos := []*model.Todo{}
	r.DB.Debug().Find(&todos)
	return todos, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	user := []*model.User{}
	r.DB.Debug().Find(&user)
	return user, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	fmt.Println("user関数")
	user, err := loader.LoadUser(ctx, obj.UserId)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *userResolver) Todos(ctx context.Context, obj *model.User) ([]*model.Todo, error) {
	fmt.Println("todos関数")
	todo, err := loader.LoadTodo(ctx, obj.ID)
	if err != nil {
		return nil, err
	}
	return todo, nil
}

type userResolver struct{ *Resolver }

func (r *queryResolver) Members(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Members - members"))
}
